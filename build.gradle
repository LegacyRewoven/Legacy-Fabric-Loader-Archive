plugins {
	id "java"
	id "maven-publish"
	id "idea"
	id "eclipse"
	id("fabric-loom") version "0.5-SNAPSHOT"
	id "maven"
	id "signing"
	id("org.cadixdev.licenser") version "0.5.0"
	id("elect86.magik") version "0.2.4"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = "fabric-loader-1.8.9"

version = version + "+build." + buildTime()

static def buildTime() {
	def df = new java.text.SimpleDateFormat("yyyyMMddHHmm")
	df.setTimeZone(TimeZone.getTimeZone("UTC"))
	return df.format(new Date())
}
// Fetch build number from Jenkins
def ENV = System.getenv()
version = version + (ENV.GITHUB_ACTIONS ? "" : "+local")

repositories {
	mavenCentral()
	jcenter()
	maven {
		name = "Fabric"
		url = "https://maven.fabricmc.net/"
	}
	maven {
		name = "mojang"
		url = "https://libraries.minecraft.net/"
	}

	maven {
		name = "Legacy Rewoven"
		url = "https://github.com/LegacyRewoven/maven/raw/main/"
	}
}

dependencies {
	minecraft "com.mojang:minecraft:1.8.9"
	mappings "net.fabricmc:yarn:1.8.9+build.202112030747"

	// Minecraft"s JAR uses these annotations
	compile "com.google.code.findbugs:jsr305:3.0.2"
	// fabric-loader dependencies
	implementation "org.ow2.asm:asm:${project.asm_version}"
	implementation "org.ow2.asm:asm-analysis:${project.asm_version}"
	implementation "org.ow2.asm:asm-commons:${project.asm_version}"
	implementation "org.ow2.asm:asm-tree:${project.asm_version}"
	implementation "org.ow2.asm:asm-util:${project.asm_version}"

	// Required for mixin annotation processor
	annotationProcessor "org.ow2.asm:asm:${project.asm_version}"
	annotationProcessor "org.ow2.asm:asm-analysis:${project.asm_version}"
	annotationProcessor "org.ow2.asm:asm-commons:${project.asm_version}"
	annotationProcessor "org.ow2.asm:asm-tree:${project.asm_version}"
	annotationProcessor "org.ow2.asm:asm-util:${project.asm_version}"

	implementation("net.fabricmc:sponge-mixin:0.8.2+build.24") {
		exclude module: "launchwrapper"
	}
	implementation "net.fabricmc:tiny-mappings-parser:0.2.2.14"
	implementation "net.fabricmc:tiny-remapper:0.3.0.70"
	implementation "net.fabricmc:access-widener:1.0.0"

	implementation "com.google.jimfs:jimfs:1.2-fabric"
	implementation "net.fabricmc:fabric-loader-sat4j:2.3.5.4"

	// launchwrapper + dependencies
	implementation ("net.minecraft:launchwrapper:1.12") {
		transitive = false
	}
	implementation "net.sf.jopt-simple:jopt-simple:5.0.3"

	testCompileOnly "org.jetbrains:annotations:19.0.0"

	// Unit testing for mod metadata
	testImplementation("org.junit.jupiter:junit-jupiter:5.6.2")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this task, sources will not be generated.
	withSourcesJar()
}

jar {
	manifest {
		attributes (
			"Main-Class": "net.fabricmc.loader.launch.server.FabricServerLauncher"
		)
	}

	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

task copyJson(type: Copy, dependsOn: ["remapJar"]) {
	from("src/main/resources/fabric-installer.json") {
		rename { "${archivesBaseName}-${version}.json" }
	}
	into "build/libs"
}

task copyJsonLw(type: Copy, dependsOn: ["remapJar"]) {
	from("src/main/resources/fabric-installer.launchwrapper.json") {
		rename { "${archivesBaseName}-${version}.launchwrapper.json" }
	}
	into "build/libs"
}

tasks.build.dependsOn "copyJson"
tasks.build.dependsOn "copyJsonLw"

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
}

javadoc {
	options {
		source = "8"
		encoding = "UTF-8"
		charSet = "UTF-8"
		memberLevel = JavadocMemberLevel.PACKAGE
		links(
				"https://guava.dev/releases/21.0/api/docs/",
				"https://asm.ow2.io/javadoc/",
				"https://docs.oracle.com/javase/8/docs/api/",
				"https://jenkins.liteloader.com/job/Mixin/javadoc/",
				"https://logging.apache.org/log4j/2.x/log4j-api/apidocs/"
		)
		addStringOption("Xdoclint:none", "-quiet")
	}

	classpath = sourceSets.main.compileClasspath
}

task javadocJar(type: Jar) {
	dependsOn javadoc
	from javadoc.destinationDir
	classifier = "javadoc"
}

build.dependsOn javadocJar

license {
	header file("HEADER")
	include "**/*.java"

	// Exclude gson since it is google"s code, we just modify and bundle it
	exclude "**/lib/gson/*.java"
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}.jar")) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
			artifact(file("src/main/resources/fabric-installer.json")) {
				builtBy remapJar
			}
			artifact(file("src/main/resources/fabric-installer.launchwrapper.json")) {
				builtBy remapJar
				classifier = "launchwrapper"
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
//		mavenLocal()
		if (System.getenv("MAVEN_PUBLISH_TOKEN") != null)
		{
			maven {
				url = "https://maven.legacyfabric.net/"
				credentials {
					username = "BobTheBuildSlave"
					password = System.getenv("MAVEN_PUBLISH_TOKEN")
				}
				authentication {
					basic(BasicAuthentication)
				}
			}
		}
	}
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
	doFirst {
		def xml = new URL("https://maven.legacyfabric.net/net/fabricmc/fabric-loader-1.8.9/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}

publish.mustRunAfter checkVersion
